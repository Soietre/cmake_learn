cmake_minimum_required(VERSION 3.16)

project(XSERVER)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
	include(cmake/CompilerStandalone.cmake)
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
set(CMAKE_PREFIX_PATH  ${CMAKE_PREFIX_PATH} "${GLOBAL_ROOT_SRC_DIR}/imported/third")

include(ExternalProject)

#include(${GLOBAL_ROOT_SRC_DIR}/cmake/utils.cmake)
include(InstallRequiredSystemLibraries)
include(CMakePackageConfigHelpers)

find_program(MAKE_EXE 
	NAMES make
	PATHS /usr/bin
	/usr/local/bin
	)

if(MAKE_EXE_NOTFOUND)
	message(FATAL_ERROR "not find make exe")
else()
	message("find make exe ${MAKE_EXE}")
endif()

set(XSERVER_BUILD_DIR ${PROJECT_BINARY_DIR})
set(IMPORTEDDIR "${GLOBAL_ROOT_SRC_DIR}/imported")
set(XSERVER_SOURCE_DIR "${IMPORTEDDIR}/xorg-server")
set(XSERVER_INSTALL_DIR "${XSERVER_BUILD_DIR}/install")

message("XSERVER_INSTALL_DIR : ${XSERVER_INSTALL_DIR}")

set(CMAKE_BUILD_TYPE Debug CACHE STRING "set buildtype debug")
string(TOLOWER ${CMAKE_BUILD_TYPE} buildtype)

set(XSERVER_PREFIX ${XSERVER_INSTALL_DIR}/usr)
if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|CLang")
	set(XSERVER_LIB_DIR ${XSERVER_INSTALL_DIR}/usr/lib/${CMAKE_SYSTEM_PROCESSOR}-${CMAKE_SYSTEM_NAME}-gnu)
	string(TOLOWER ${XSERVER_LIB_DIR} XSERVER_LIB_DIR)
else()
	set(XSERVER_LIB_DIR ${XSERVER_INSTALL_DIR}/usr/lib)
endif()

set(XSERVERCFLAGS_CFLAGS "")
set(XSERVERCFLAGS_LIBS "")

set(XSERVERLIBS_CFLAGS "")
set(XSERVERLIBS_LIBS "")

message("check util_macros and set up")
find_package(util_macros REQUIRED)

find_package(PIXMAN REQUIRED)
message("**********PIXMAN_CFLAG: ${PIXMAN_CFLAG}")
message("**********PIXMAN_LIBS : ${PIXMAN_LIB}")

#add to XSERVER_CFLAGS LIBS
find_package(XKBFILE REQUIRED)

find_package(DRM REQUIRED COMPONENTS drm kms)

find_package(MESA3D REQUIRED COMPONENTS GL gbm)

find_package(XFONT2)
message("XFONT2_CFLAGS : ${XFONT2_CFLAGS}")
message("XFONT2_LIBS : ${XFONT2_LIBS}")
find_package(PCIACCESS REQUIRED)

find_package(EPOXY REQUIRED)

find_package(XCB REQUIRED)

#all include file 
find_package(XORGPROTO REQUIRED)

#need xproto
find_package(XAU REQUIRED)

#need xproto 
find_package(xshmfence REQUIRED)

#need xorgproto _CFLAGS _LIBS
find_package(XDMCP REQUIRED)

find_package(fontenc REQUIRED)

ExternalProject_Add(xserver
	TMP_DIR ${XSERVER_BUILD_DIR}/tmp
	STAMP_DIR ${XSERVER_BUILD_DIR}/xserver-stamp
	SOURCE_DIR ${XSERVER_SOURCE_DIR}
	INSTALL_DIR ${XSERVER_INSTALL_DIR}
	CONFIGURE_COMMAND
	./configure
       	--disable-dependency-tracking
	--enable-xdmcp
	--enable-xtrans-send-fds
       	--prefix=${XSERVER_BUILD_DIR}/install
	PIXMAN_CFLAGS=${PIXMAN_CFLAG}
	PIXMAN_LIBS=${PIXMAN_LIB}
	XFONT2_CFLAGS=${XFONT2_CFLAGS}
	XFONT2_LIBS=${XFONT2_LIBS}
	XDMCP_CFLAGS=${XDMCP_CFLAGS}
	XDMCP_LIBS=${XDMCP_LIBS}
	LIBDRM_CFLAGS=${DRM_CFLAGS}
	LIBDRM_LIBS=${DRM_LIBS}
	GL_CFLAGS=${GL_CFLAGS}
	GL_LIBS=${GL_LIBS}
	PCIACCESS_CFLAGS=${PCIACCESS_CFLAGS}
	PCIACCESS_LIBS=${PCIACCESS_LIBS}
	GLAMOR_CFLAGS=${GLAMOR_CFLAGS}
	GLAMOR_LIBS=${GLAMOR_LIBS}
	XCB_CFLAGS=${XCB_CFLAGS}
	XCB_LIBS=${XCB_LIBS}
	XSHMFENCE_CFLAGS=${XSHMFENCE_CFLAGS}
	XSHMFENCE_LIBS=${XSHMFENCE_LIBS}
	XSERVERCFLAGS_CFLAGS=${XSERVERCFLAGS_CFLAGS}
	XSERVERCFLAGS_LIBS=${XSERVERCFLAGS_LIBS}
	XSERVERLIBS_CFLAGS=${XSERVERLIBS_CFLAGS}
	XSERVERLIBS_LIBS=${XSERVERLIBS_LIBS}
	XCB_CFLAGS=${XCB_CFLAGS}
	XCB_LIBS=${XCB_LIBS}
	BUILD_IN_SOURCE true
	BUILD_COMMAND
       	cd ${XSERVER_SOURCE_DIR} && ${MAKE_EXE}
	INSTALL_COMMAND  ${MAKE_EXE} install
	)	

EXternalProject_Add_Step(xserver autogen
	WORKING_DIRECTORY ${XSERVER_SOURCE_DIR}
	COMMAND
	./autogen.sh
       	--disable-dependency-tracking
	PIXMAN_CFLAGS={PIXMAN_CFLAG} 
	PIXMAN_LIBS=${PIXMAN_LIB} 
	XFONT2_CFLAGS=${XFONT2_CFLAGS}
	XFONT2_LIBS=${XFONT2_LIBS}
	XDMCP_CFLAGS=${XDMCP_CFLAGS}
	XDMCP_LIBS=${XDMCP_LIBS}
	LIBDRM_CFLAGS="${DRM_CFLAGS}"
	LIBDRM_LIBS="${DRM_LIBS}"
	GL_CFLAGS="${GL_CFLAGS}"
	GL_LIBS="${GL_LIBS}"
	PCIACCESS_CFLAGS="${PCIACCESS_CFLAGS}"
	PCIACCESS_LIBS="${PCIACCESS_LIBS}"
	GLAMOR_CFLAGS="${GLAMOR_CFLAGS}"
	GLAMOR_LIBS="${GLAMOR_LIBS}"
	XCB_CFLAGS=${XCB_CFLAGS}
	XCB_LIBS=${XCB_LIBS}
	XSHMFENCE_CFLAGS=${XSHMFENCE_CFLAGS}
	XSHMFENCE_LIBS=${XSHMFENCE_LIBS}
	XSERVERCFLAGS_CFLAGS="${XSERVERCFLAGS_CFLAGS}"
	XSERVERCFLAGS_LIBS="${XSERVERCFLAGS_LIBS}"
	XSERVERLIBS_CFLAGS="${XSERVERLIBS_CFLAGS}"
	XSERVERLIBS_LIBS="${XSERVERLIBS_LIBS}"
 	COMMAND ${MAKE_EXE} distclean
	DEPENDERS configure
	)	


message("CMAKE_INSTALL_PREFIX: ${CMAKE_INSTALL_PREFIX}")
message("DIR: ${CMAKE_BINARY_DIR}/install/include DES:{CMAKE_INSTALL_PREFIX}") 
install(DIRECTORY ${CMAKE_BINARY_DIR}/install/include
	DESTINATION ${CMAKE_INSTALL_PREFIX}
)

#get_version(${XSERVER_SOURCE_DIR} "1.20.10")
set(VERSION_MAJOR 1)
set(VERSION_MINOR 20)
set(VERSION_PATCH 10)
message("VERSION num is ${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}")
write_basic_package_version_file(
	"${CMAKE_CURRENT_BINARY_DIR}/XserverConfigVersion.cmake"
	VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
	COMPATIBILITY AnyNewerVersion
	)

configure_package_config_file(cmake/Config.cmake.in
	"${CMAKE_CURRENT_BINARY_DIR}/XserverConfig.cmake"
	INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake
	)
message("LIB DIR: ${CMAKE_BINARY_DIR}/install/${CMAKE_INSTALL_LIBDIR}")
message("LIB DESTINATION: ${CMAKE_INSTALL_PREFIX}")

install(DIRECTORY ${CMAKE_BINARY_DIR}/install/${CMAKE_INSTALL_LIBDIR}
	DESTINATION ${CMAKE_INSTALL_PREFIX}
	)
message("FindXSERVER command execute : ${CMAKE_CURRENT_BINARY_DIR}")
install(FILES
	"${CMAKE_CURRENT_BINARY_DIR}/XserverConfig.cmake"
	"${CMAKE_CURRENT_BINARY_DIR}/XserverConfigVersion.cmake"
	"cmake/FindXSERVER.cmake"
	DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake
	)
#set(CPACK_PACKAGE_DIRECTORY "${TARGET_OUT}/installer")
set(CPACK_PACKAGE_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/copyright")

set(CPACK_PACKAGE_VERSION_MAJOR "${VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${VERSION_PATCH}")

if(DEFINED VERSION_BUILD AND NOT ${VERSION_BUILD} STREQUAL "")
	set(PACKAGE_VERSION_STRING "${VERSION_BUILD}")
else()
	set(PACKAGE_VERSION_STRING "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
endif()

set(CPACK_PACKAGE_VERSION ${PACKAGE_VERSION_STRING})

## Packing directives
set(CPACK_GENERATOR "DEB; RPM" CACHE STRING "Package types to build")
set(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/description")
set(CPACK_PACKAGE_NAME xserever)
set(CPACK_PACKAGE_VENDOR "XDXCT")
set(CPACK_PACKAGE_CONTACT "Supported@xdxct.com")
set(CPACK_PACKAGE_HOMEPAGE "http://www.xdxct.com")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "XDXCT XSERVER User Mode Driver")


set(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${PACKAGE_VERSION_STRING}.${CMAKE_SYSTEM_NAME}.${CMAKE_SYSTEM_PROCESSOR}")

if(UNIX)
	#debia package specific variable 
	set(CPACK_DEBIAN_PACKAGE_DEPENDS "libdrm")
	set(CPACK_DEBIAN_HOMEPAGE ${CPACK_PACKAGE_HOMEPAGE})

	set(CPACK_RPM_COMPONENT_INSTALL ON)
	set(CPACK_RPM_PACKAGE ${CPACK_PACKAGE_HOMEPAGE})

	set(CPACK_RPM_COMPONENT_INSTALL ON)
	set(CPACK_RPM_PACKAGE_URL ${CPACK_PACKAGE_HOMEPAGE})
	set(CPACK_RPM_PACKGE_REQUIRES "libdrm")
endif()
include(CPack)
